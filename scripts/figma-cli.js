#!/usr/bin/env node

/**
 * Figma CLI Tool
 * Quick command-line interface for Figma design system operations
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Simple configuration management
const CONFIG_FILE = '.figma-config.json';

function loadConfig() {
  try {
    if (fs.existsSync(CONFIG_FILE)) {
      return JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf8'));
    }
  } catch (error) {
    console.error('❌ Error loading config:', error.message);
  }
  return {};
}

function saveConfig(config) {
  try {
    fs.writeFileSync(CONFIG_FILE, JSON.stringify(config, null, 2));
    console.log('✅ Configuration saved');
  } catch (error) {
    console.error('❌ Error saving config:', error.message);
  }
}

function generateTokensFile() {
  // This would normally import from the actual module
  // For now, we'll create a basic structure
  const tokens = {
    global: {
      colors: {
        primary: {
          "50": { value: "#f0f9ff" },
          "100": { value: "#e0f2fe" },
          "200": { value: "#bae6fd" },
          "300": { value: "#7dd3fc" },
          "400": { value: "#38bdf8" },
          "500": { value: "#00b140" },
          "600": { value: "#0284c7" },
          "700": { value: "#0369a1" },
          "800": { value: "#075985" },
          "900": { value: "#0c4a6e" }
        },
        secondary: {
          "50": { value: "#fefce8" },
          "100": { value: "#fef9c3" },
          "200": { value: "#fef08a" },
          "300": { value: "#fde047" },
          "400": { value: "#facc15" },
          "500": { value: "#baff29" },
          "600": { value: "#ca8a04" },
          "700": { value: "#a16207" },
          "800": { value: "#854d0e" },
          "900": { value: "#713f12" }
        }
      },
      typography: {
        fontFamily: {
          primary: { value: "DM Sans" }
        },
        fontSize: {
          xs: { value: "0.75rem" },
          sm: { value: "0.875rem" },
          base: { value: "1rem" },
          lg: { value: "1.125rem" },
          xl: { value: "1.25rem" },
          "2xl": { value: "1.5rem" },
          "3xl": { value: "1.875rem" },
          "4xl": { value: "2.25rem" }
        }
      },
      spacing: {
        "0": { value: "0" },
        "1": { value: "0.25rem" },
        "2": { value: "0.5rem" },
        "4": { value: "1rem" },
        "6": { value: "1.5rem" },
        "8": { value: "2rem" },
        "12": { value: "3rem" },
        "16": { value: "4rem" }
      }
    }
  };

  return JSON.stringify(tokens, null, 2);
}

function generateVariablesFile() {
  const variables = {
    collections: [
      {
        id: "colors",
        name: "Colors",
        modes: [{ id: "light", name: "Light" }],
        variables: [
          {
            id: "primary-500",
            name: "primary/500",
            type: "COLOR",
            values: { light: "#00b140" }
          },
          {
            id: "secondary-500", 
            name: "secondary/500",
            type: "COLOR",
            values: { light: "#baff29" }
          }
        ]
      },
      {
        id: "spacing",
        name: "Spacing", 
        modes: [{ id: "default", name: "Default" }],
        variables: [
          {
            id: "spacing-4",
            name: "spacing/4",
            type: "FLOAT",
            values: { default: 16 }
          },
          {
            id: "spacing-8",
            name: "spacing/8", 
            type: "FLOAT",
            values: { default: 32 }
          }
        ]
      }
    ]
  };

  return JSON.stringify(variables, null, 2);
}

function generateTokensStudioFile() {
  // Note: This is a simplified version. The full version is generated by the TypeScript utility.
  // For the complete comprehensive export, use: npm run figma export tokens-studio
  const tokens = {
    "colors": {
      "primary": {
        "50": { "value": "#eafff2", "type": "color", "description": "Primary brand color - 50" },
        "100": { "value": "#d0ffe2", "type": "color", "description": "Primary brand color - 100" },
        "200": { "value": "#a4ffc8", "type": "color", "description": "Primary brand color - 200" },
        "300": { "value": "#68ffa0", "type": "color", "description": "Primary brand color - 300" },
        "400": { "value": "#26f471", "type": "color", "description": "Primary brand color - 400" },
        "500": { "value": "#00b140", "type": "color", "description": "Primary brand color - 500" },
        "600": { "value": "#009a3a", "type": "color", "description": "Primary brand color - 600" },
        "700": { "value": "#007d31", "type": "color", "description": "Primary brand color - 700" },
        "800": { "value": "#00622a", "type": "color", "description": "Primary brand color - 800" },
        "900": { "value": "#005124", "type": "color", "description": "Primary brand color - 900" },
        "950": { "value": "#002d13", "type": "color", "description": "Primary brand color - 950" }
      },
      "secondary": {
        "50": { "value": "#fdfff0", "type": "color", "description": "Secondary accent color - 50" },
        "100": { "value": "#fbffe0", "type": "color", "description": "Secondary accent color - 100" },
        "200": { "value": "#f7ffc2", "type": "color", "description": "Secondary accent color - 200" },
        "300": { "value": "#f1ff98", "type": "color", "description": "Secondary accent color - 300" },
        "400": { "value": "#e7ff62", "type": "color", "description": "Secondary accent color - 400" },
        "500": { "value": "#baff29", "type": "color", "description": "Secondary accent color - 500" },
        "600": { "value": "#a3e620", "type": "color", "description": "Secondary accent color - 600" },
        "700": { "value": "#8cc518", "type": "color", "description": "Secondary accent color - 700" },
        "800": { "value": "#75a416", "type": "color", "description": "Secondary accent color - 800" },
        "900": { "value": "#5d8317", "type": "color", "description": "Secondary accent color - 900" },
        "950": { "value": "#334a08", "type": "color", "description": "Secondary accent color - 950" }
      }
    },
    "spacing": {
      "0": { "value": "0rem", "type": "dimension", "description": "Spacing scale - 0" },
      "1": { "value": "0.25rem", "type": "dimension", "description": "Spacing scale - 1" },
      "2": { "value": "0.5rem", "type": "dimension", "description": "Spacing scale - 2" },
      "3": { "value": "0.75rem", "type": "dimension", "description": "Spacing scale - 3" },
      "4": { "value": "1rem", "type": "dimension", "description": "Spacing scale - 4" },
      "5": { "value": "1.25rem", "type": "dimension", "description": "Spacing scale - 5" },
      "6": { "value": "1.5rem", "type": "dimension", "description": "Spacing scale - 6" },
      "8": { "value": "2rem", "type": "dimension", "description": "Spacing scale - 8" },
      "10": { "value": "2.5rem", "type": "dimension", "description": "Spacing scale - 10" },
      "12": { "value": "3rem", "type": "dimension", "description": "Spacing scale - 12" },
      "16": { "value": "4rem", "type": "dimension", "description": "Spacing scale - 16" },
      "20": { "value": "5rem", "type": "dimension", "description": "Spacing scale - 20" },
      "24": { "value": "6rem", "type": "dimension", "description": "Spacing scale - 24" }
    },
    "borderRadius": {
      "none": { "value": "0", "type": "dimension", "description": "Border radius - none" },
      "sm": { "value": "0.125rem", "type": "dimension", "description": "Border radius - sm" },
      "DEFAULT": { "value": "0.25rem", "type": "dimension", "description": "Border radius - default" },
      "md": { "value": "0.375rem", "type": "dimension", "description": "Border radius - md" },
      "lg": { "value": "0.5rem", "type": "dimension", "description": "Border radius - lg" },
      "xl": { "value": "0.75rem", "type": "dimension", "description": "Border radius - xl" },
      "2xl": { "value": "1rem", "type": "dimension", "description": "Border radius - 2xl" },
      "3xl": { "value": "1.5rem", "type": "dimension", "description": "Border radius - 3xl" },
      "full": { "value": "9999px", "type": "dimension", "description": "Border radius - full" }
    },
    "typography": {
      "fontFamily": {
        "primary": { "value": "DM Sans", "type": "fontFamily", "description": "Primary font family" },
        "mono": { "value": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace", "type": "fontFamily", "description": "Monospace font family" }
      },
      "fontSize": {
        "xs": { "value": "0.75rem", "type": "dimension", "description": "Extra small text size" },
        "sm": { "value": "0.875rem", "type": "dimension", "description": "Small text size" },
        "base": { "value": "1rem", "type": "dimension", "description": "Base text size" },
        "lg": { "value": "1.125rem", "type": "dimension", "description": "Large text size" },
        "xl": { "value": "1.25rem", "type": "dimension", "description": "Extra large text size" },
        "2xl": { "value": "1.5rem", "type": "dimension", "description": "2x large text size" },
        "3xl": { "value": "1.875rem", "type": "dimension", "description": "3x large text size" },
        "4xl": { "value": "2.25rem", "type": "dimension", "description": "4x large text size" },
        "5xl": { "value": "3rem", "type": "dimension", "description": "5x large text size" },
        "6xl": { "value": "3.75rem", "type": "dimension", "description": "6x large text size" }
      },
      "fontWeight": {
        "normal": { "value": "400", "type": "fontWeight", "description": "Normal font weight" },
        "medium": { "value": "500", "type": "fontWeight", "description": "Medium font weight" },
        "semibold": { "value": "600", "type": "fontWeight", "description": "Semibold font weight" },
        "bold": { "value": "700", "type": "fontWeight", "description": "Bold font weight" }
      }
    },
    "opacity": {
      "0": { "value": "0", "type": "opacity", "description": "Fully transparent" },
      "25": { "value": "0.25", "type": "opacity", "description": "Quarter opacity" },
      "50": { "value": "0.5", "type": "opacity", "description": "Half opacity" },
      "75": { "value": "0.75", "type": "opacity", "description": "Three quarter opacity" },
      "100": { "value": "1", "type": "opacity", "description": "Fully opaque" }
    }
  };

  return JSON.stringify(tokens, null, 2);
}

// Command handlers
function handleConfig(args) {
  const [action, key, value] = args;
  const config = loadConfig();

  switch (action) {
    case 'set':
      if (key && value) {
        config[key] = value;
        saveConfig(config);
      } else {
        console.log('Usage: figma config set <key> <value>');
      }
      break;
      
    case 'get':
      if (key) {
        console.log(`${key}: ${config[key] || 'not set'}`);
      } else {
        console.log('Current configuration:');
        console.log(JSON.stringify(config, null, 2));
      }
      break;
      
    case 'list':
      console.log('Current configuration:');
      console.log(JSON.stringify(config, null, 2));
      break;
      
    default:
      console.log(`
Figma Configuration Commands:
  figma config set <key> <value>  - Set configuration value
  figma config get <key>          - Get configuration value  
  figma config list               - List all configuration
  
Example:
  figma config set accessToken your-figma-token
  figma config set fileKey your-file-key
`);
  }
}

function handleExport(args) {
  const [format, filename] = args;
  
  switch (format) {
    case 'tokens':
      const tokens = generateTokensFile();
      const tokensFile = filename || 'design-tokens.json';
      fs.writeFileSync(tokensFile, tokens);
      console.log(`✅ Design tokens exported to ${tokensFile}`);
      break;
      
    case 'variables':
      const variables = generateVariablesFile();
      const variablesFile = filename || 'figma-variables.json';
      fs.writeFileSync(variablesFile, variables);
      console.log(`✅ Figma variables exported to ${variablesFile}`);
      break;
      
    case 'tokens-studio':
      const tokensStudio = generateTokensStudioFile();
      const tokensStudioFile = filename || 'tokens-studio.json';
      fs.writeFileSync(tokensStudioFile, tokensStudio);
      console.log(`✅ Tokens Studio format exported to ${tokensStudioFile}`);
      break;
      
    default:
      console.log(`
Export Commands:
  figma export tokens [filename]       - Export design tokens JSON
  figma export variables [filename]    - Export Figma variables JSON
  figma export tokens-studio [filename] - Export Tokens Studio format JSON
  
Examples:
  figma export tokens
  figma export variables my-variables.json
  figma export tokens-studio
`);
  }
}

function handleSync(args) {
  const [action] = args;
  const config = loadConfig();
  
  if (!config.accessToken || !config.fileKey) {
    console.log('❌ Figma configuration missing. Run:');
    console.log('  figma config set accessToken your-token');
    console.log('  figma config set fileKey your-file-key');
    return;
  }
  
  switch (action) {
    case 'push':
      console.log('⚠️  Push to Figma requires "Read and write" permissions for File content.');
      console.log('');
      console.log('Your current token has "Read only" permissions, which is perfect for:');
      console.log('• Pulling styles from Figma to code');
      console.log('• Exporting design tokens');
      console.log('• Reading Figma file data');
      console.log('');
      console.log('💡 Alternative: Export design tokens and import them via Figma plugins:');
      console.log('   figma export tokens');
      console.log('   figma export variables');
      break;
      
    case 'pull':
      console.log('🔄 Pulling design system from Figma...');
      console.log('📥 This would import styles from Figma to your code');
      console.log('✅ Pull completed (simulated)');
      break;
      
    case 'status':
      console.log('📊 Figma Sync Status:');
      console.log(`  Access Token: ${config.accessToken ? '✅ Set' : '❌ Missing'}`);
      console.log(`  File Key: ${config.fileKey ? '✅ Set' : '❌ Missing'}`);
      console.log(`  Auto Sync: ${config.autoSync ? '🔄 Enabled' : '⏸️ Disabled'}`);
      break;
      
    default:
      console.log(`
Sync Commands:
  figma sync push    - Push design system to Figma
  figma sync pull    - Pull design system from Figma  
  figma sync status  - Show sync status
  
Examples:
  figma sync push
  figma sync pull
`);
  }
}

function handleInit() {
  console.log('🎨 Initializing Figma integration...');
  
  // Create basic config structure
  const config = {
    accessToken: '',
    fileKey: '',
    autoSync: false,
    syncInterval: 30000
  };
  
  saveConfig(config);
  
  console.log(`
✅ Figma integration initialized!

Next steps:
1. Get your Figma access token:
   - Go to Figma → Settings → Personal access tokens
   - Generate new token with "File content" permissions
   
2. Configure your credentials:
   figma config set accessToken YOUR_TOKEN
   figma config set fileKey YOUR_FILE_KEY
   
3. Test the connection:
   figma sync status
   
4. Push your design system:
   figma sync push
`);
}

// Main CLI handler
function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  const subArgs = args.slice(1);
  
  switch (command) {
    case 'init':
      handleInit();
      break;
      
    case 'config':
      handleConfig(subArgs);
      break;
      
    case 'export':
      handleExport(subArgs);
      break;
      
    case 'sync':
      handleSync(subArgs);
      break;
      
    case 'help':
    case '--help':
    case '-h':
    default:
      console.log(`
🎨 Figma Design System CLI

Usage:
  figma <command> [options]

Commands:
  init                 - Initialize Figma integration
  config <action>      - Manage configuration
  export <format>      - Export design tokens/variables
  sync <action>        - Sync with Figma
  help                 - Show this help message

Examples:
  figma init
  figma config set accessToken your-token
  figma export tokens
  figma sync push

For detailed help on a command:
  figma <command> help
`);
  }
}

// Run the CLI
main(); 